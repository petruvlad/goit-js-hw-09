{"mappings":"AAAAA,SAASC,iBAAiB,oBAAoB,WAC5C,MAAMC,EAAcF,SAASG,cAAc,SAkB3C,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAzBbJ,EAAYD,iBAAiB,UAAU,SAAUa,GAC/CA,EAAMC,iBAEN,MAAMT,EAAQU,SAASd,EAAYe,SAASX,MAAMY,MAAO,IACnDC,EAAOH,SAASd,EAAYe,SAASE,KAAKD,MAAO,KAyBzD,SAAwBE,EAAQC,EAAcF,GAC5C,MAAMG,EAAW,GAEjB,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,IAAK,CAChC,MAAMC,EAAWD,EACXE,EAAeJ,GAAgBE,EAAI,GAAKJ,EAE9CG,EAASI,KACPtB,EAAcoB,EAAUC,GACrBE,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,QAAQC,IAAI,uBAAqBxB,QAAiBC,MAAU,IAE7DwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBsB,QAAQC,IAAI,sBAAoBxB,QAAiBC,MAAU,I,CAKnE,OAAOC,QAAQwB,IAAIT,E,EAxCnBU,CAFehB,SAASd,EAAYe,SAASG,OAAOF,MAAO,IAEpCZ,EAAOa,GAC3BQ,MAAK,KACJC,QAAQC,IAAI,sCAAsC,IAEnDC,OAAM,KACLF,QAAQK,MAAM,oCAAoC,G,OAsC1DjC,SAASC,iBAAiB,oBAAoB,WAC5C,MAAMC,EAAcF,SAASG,cAAc,SAkB3C,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAzBbJ,EAAYD,iBAAiB,UAAU,SAAUa,GAC/CA,EAAMC,iBAEN,MAAMT,EAAQU,SAASd,EAAYe,SAASX,MAAMY,MAAO,IACnDC,EAAOH,SAASd,EAAYe,SAASE,KAAKD,MAAO,KAyBzD,SAAwBE,EAAQC,EAAcF,GAC5C,MAAMG,EAAW,GAEjB,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,IAAK,CAChC,MAAMW,EAAWX,EACXE,EAAeJ,GAAgBE,EAAI,GAAKJ,EAE9CG,EAASI,KACPtB,EAAc8B,EAAUT,GACrBE,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,QAAQC,IAAI,uBAAqBxB,QAAiBC,MAAU,IAE7DwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBsB,QAAQC,IAAI,sBAAoBxB,QAAeC,MAAU,I,CAKjE,OAAOC,QAAQwB,IAAIT,E,EAxCnBU,CAFehB,SAASd,EAAYe,SAASG,OAAOF,MAAO,IAEpCZ,EAAOa,GAC3BQ,MAAK,KACJC,QAAQC,IAAI,sCAAsC,IAEnDC,OAAM,KACLF,QAAQK,MAAM,oCAAoC,G","sources":["src/js/03-promises.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\n  const promiseForm = document.querySelector('.form');\n\n  promiseForm.addEventListener('submit', function (event) {\n    event.preventDefault();\n    \n    const delay = parseInt(promiseForm.elements.delay.value, 10);\n    const step = parseInt(promiseForm.elements.step.value, 10);\n    const amount = parseInt(promiseForm.elements.amount.value, 10);\n\n    createPromises(amount, delay, step)\n      .then(() => {\n        console.log('All promises fulfilled successfully');\n      })\n      .catch(() => {\n        console.error('At least one promise was rejected');\n      });\n  });\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  function createPromises(amount, initialDelay, step) {\n    const promises = [];\n\n    for (let i = 1; i <= amount; i++) {\n      const position = i;\n      const promiseDelay = initialDelay + (i - 1) * step;\n\n      promises.push(\n        createPromise(position, promiseDelay)\n          .then(({ position, delay }) => {\n            console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          })\n          .catch(({ position, delay }) => {\n            console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          })\n      );\n    }\n\n    return Promise.all(promises);\n  }\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  const promiseForm = document.querySelector('.form');\n\n  promiseForm.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    const delay = parseInt(promiseForm.elements.delay.value, 10);\n    const step = parseInt(promiseForm.elements.step.value, 10);\n    const amount = parseInt(promiseForm.elements.amount.value, 10);\n\n    createPromises(amount, delay, step)\n      .then(() => {\n        console.log('All promises fulfilled successfully');\n      })\n      .catch(() => {\n        console.error('At least one promise was rejected');\n      });\n  });\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  function createPromises(amount, initialDelay, step) {\n    const promises = [];\n\n    for (let i = 1; i <= amount; i++) {\n      const position = i;\n      const promiseDelay = initialDelay + (i - 1) * step;\n\n      promises.push(\n        createPromise(position, promiseDelay)\n          .then(({ position, delay }) => {\n            console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          })\n          .catch(({ position, delay }) => {\n            console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          })\n      );\n    }\n\n    return Promise.all(promises);\n  }\n});\n\n"],"names":["document","addEventListener","promiseForm","querySelector","createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","event","preventDefault","parseInt","elements","value","step","amount","initialDelay","promises","i","position1","promiseDelay","push","then","console","log","catch","all","createPromises","error","position3"],"version":3,"file":"03-promises.e6b44688.js.map"}